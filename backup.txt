from flask import Flask, request, jsonify
from flask_pymongo import PyMongo
from werkzeug.security import generate_password_hash, check_password_hash
from flask_jwt_extended import JWTManager, create_access_token, jwt_required, get_jwt_identity

app = Flask(__name__)

# Configure MongoDB
app.config["MONGO_URI"] = "mongodb+srv://101303363:Azr2010q@cluster0.wl4qo.mongodb.net/<database>?retryWrites=true&w=majority"
mongo = PyMongo(app)

# JWT Config
app.config["JWT_SECRET_KEY"] = "your_jwt_secret"  # Change this to a secure secret
jwt = JWTManager(app)





# Registration Route
@app.route('/register', methods=['POST'])
def register():
    data = request.get_json()
    
    if 'email' not in data or 'password' not in data:
        return jsonify({'message': 'Email and password are required'}), 400

    hashed_password = generate_password_hash(data['password'])
    user_role = data.get('role', 'user')  # Default role is 'user'

    # Add user to DB
    try:
        mongo.db.users.insert_one({
            'email': data['email'],
            'password': hashed_password,
            'role': user_role
        })
        return jsonify({'message': 'User registered successfully'}), 201
    except Exception as e:
        return jsonify({'message': f'Error registering user: {str(e)}'}), 500

# Login Route
@app.route('/login', methods=['POST'])
def login():
    data = request.get_json()
    
    if 'email' not in data or 'password' not in data:
        return jsonify({'message': 'Email and password are required'}), 400

    user = mongo.db.users.find_one({'email': data['email']})

    if user and check_password_hash(user['password'], data['password']):
        access_token = create_access_token(identity={'email': user['email'], 'role': user['role']})
        return jsonify(access_token=access_token), 200
    return jsonify({'message': 'Invalid credentials'}), 401

# Protected Route (Admin only)
@app.route('/admin', methods=['GET'])
@jwt_required()
def admin():
    current_user = get_jwt_identity()
    if current_user['role'] != 'admin':
        return jsonify({'message': 'Access forbidden'}), 403
    users = mongo.db.users.find()
    return jsonify([user['email'] for user in users]), 200

if __name__ == '__main__':
    app.run(debug=True)
